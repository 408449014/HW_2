# -*- coding: utf-8 -*-
"""Homework_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YIQv-_CVGu00He2L1c9zwDWe18uCSJHo
"""

import numpy as np 
import pandas as pd 
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler
from sklearn import model_selection
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.linear_model import ElasticNet
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
import scipy.stats as stats 
from math import sqrt
from matplotlib import pyplot as plt 
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from numpy import mean

from google.colab import drive
drive.mount("/content/gdrive")

data = pd.read_csv('/content/gdrive/My Drive/Colab Notebooks/SimpleWeather.csv')

data.head()

y = data["Temperature (C)"]
X = data.drop(["Temperature (C)"], axis = 1)

stdScaler = StandardScaler()
stdScaler.fit(X)
X = pd.DataFrame(stdScaler.transform(X), columns=X.columns)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=40)

models = {
                "Linear regression": LinearRegression(),
                 "Ridge regression": Ridge(),
                 "Lasso regression": Lasso(),
           "Elastic Net regression": ElasticNet(),
   "K-nearest Neighbors regression": KNeighborsRegressor(),
         "Decision Tree regression": DecisionTreeRegressor(),
         "Random Forest regression": RandomForestRegressor()
}

for name, model in models.items():
    model.fit(X_train, y_train)
    print(name + " - Trained")

predictions = {}
for name, model in models.items():
    y_pred = model.predict(X_test)  
    predictions[name] = y_pred

index = list(predictions.keys())[0]
model_eval = pd.DataFrame(index=[index], columns=["r2 score", "RMSE"])
for key, value in predictions.items():
    model_eval.loc[key, "r2 score"] = "{:.8f}".format(r2_score(y_test, value)) 
    model_eval.loc[key, "RMSE"] = "{:.8f}".format(np.sqrt(mean_squared_error(y_test, value)))
model_eval.reset_index(inplace = True)

model_eval.style

max_val_score = {}

lin_model_kfold = KFold(n_splits=5)

print('-----Cross Validation Scores----')
for name, model in models.items():
    score = mean(cross_val_score(model, X, y, cv=lin_model_kfold))
    print('{:s} model: {:.5f}'.format(name, score))
    if not bool(max_val_score):
        max_val_score['model'] = name
        max_val_score['score'] = score
    elif(max_val_score['score'] < score):
        max_val_score['model'] = name
        max_val_score['score'] = score
print('\n\nThe final model that fits this regression problem best is the {:s} model with a score of {:.5f}'.format(max_val_score['model'], max_val_score['score']))